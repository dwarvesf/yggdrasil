// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package device

import (
	"sync"

	"github.com/satori/go.uuid"

	"github.com/dwarvesf/yggdrasil/device/model"
)

var (
	lockServiceMockCreate       sync.RWMutex
	lockServiceMockGet          sync.RWMutex
	lockServiceMockGetList      sync.RWMutex
	lockServiceMockUpdate       sync.RWMutex
	lockServiceMockValidateUser sync.RWMutex
)

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(d *model.Device) error {
// 	               panic("TODO: mock out the Create method")
//             },
//             GetFunc: func(deviceID uuid.UUID) (*model.Device, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             GetListFunc: func(query Query) ([]model.Device, error) {
// 	               panic("TODO: mock out the GetList method")
//             },
//             UpdateFunc: func(d *model.Device) error {
// 	               panic("TODO: mock out the Update method")
//             },
//             ValidateUserFunc: func(userID uuid.UUID) error {
// 	               panic("TODO: mock out the ValidateUser method")
//             },
//         }
//
//         // TODO: use mockedService in code that requires Service
//         //       and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(d *model.Device) error

	// GetFunc mocks the Get method.
	GetFunc func(deviceID uuid.UUID) (*model.Device, error)

	// GetListFunc mocks the GetList method.
	GetListFunc func(query Query) ([]model.Device, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(d *model.Device) error

	// ValidateUserFunc mocks the ValidateUser method.
	ValidateUserFunc func(userID uuid.UUID) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// D is the d argument value.
			D *model.Device
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// DeviceID is the deviceID argument value.
			DeviceID uuid.UUID
		}
		// GetList holds details about calls to the GetList method.
		GetList []struct {
			// Query is the query argument value.
			Query Query
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// D is the d argument value.
			D *model.Device
		}
		// ValidateUser holds details about calls to the ValidateUser method.
		ValidateUser []struct {
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(d *model.Device) error {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		D *model.Device
	}{
		D: d,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(d)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	D *model.Device
} {
	var calls []struct {
		D *model.Device
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(deviceID uuid.UUID) (*model.Device, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		DeviceID uuid.UUID
	}{
		DeviceID: deviceID,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(deviceID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	DeviceID uuid.UUID
} {
	var calls []struct {
		DeviceID uuid.UUID
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// GetList calls GetListFunc.
func (mock *ServiceMock) GetList(query Query) ([]model.Device, error) {
	if mock.GetListFunc == nil {
		panic("ServiceMock.GetListFunc: method is nil but Service.GetList was just called")
	}
	callInfo := struct {
		Query Query
	}{
		Query: query,
	}
	lockServiceMockGetList.Lock()
	mock.calls.GetList = append(mock.calls.GetList, callInfo)
	lockServiceMockGetList.Unlock()
	return mock.GetListFunc(query)
}

// GetListCalls gets all the calls that were made to GetList.
// Check the length with:
//     len(mockedService.GetListCalls())
func (mock *ServiceMock) GetListCalls() []struct {
	Query Query
} {
	var calls []struct {
		Query Query
	}
	lockServiceMockGetList.RLock()
	calls = mock.calls.GetList
	lockServiceMockGetList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(d *model.Device) error {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		D *model.Device
	}{
		D: d,
	}
	lockServiceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceMockUpdate.Unlock()
	return mock.UpdateFunc(d)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	D *model.Device
} {
	var calls []struct {
		D *model.Device
	}
	lockServiceMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceMockUpdate.RUnlock()
	return calls
}

// ValidateUser calls ValidateUserFunc.
func (mock *ServiceMock) ValidateUser(userID uuid.UUID) error {
	if mock.ValidateUserFunc == nil {
		panic("ServiceMock.ValidateUserFunc: method is nil but Service.ValidateUser was just called")
	}
	callInfo := struct {
		UserID uuid.UUID
	}{
		UserID: userID,
	}
	lockServiceMockValidateUser.Lock()
	mock.calls.ValidateUser = append(mock.calls.ValidateUser, callInfo)
	lockServiceMockValidateUser.Unlock()
	return mock.ValidateUserFunc(userID)
}

// ValidateUserCalls gets all the calls that were made to ValidateUser.
// Check the length with:
//     len(mockedService.ValidateUserCalls())
func (mock *ServiceMock) ValidateUserCalls() []struct {
	UserID uuid.UUID
} {
	var calls []struct {
		UserID uuid.UUID
	}
	lockServiceMockValidateUser.RLock()
	calls = mock.calls.ValidateUser
	lockServiceMockValidateUser.RUnlock()
	return calls
}
