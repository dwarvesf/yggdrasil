// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package referral

import (
	"sync"

	"github.com/dwarvesf/yggdrasil/services/identity/model"
)

var (
	lockServiceMockDeleteReferralWithCode sync.RWMutex
	lockServiceMockGet                    sync.RWMutex
	lockServiceMockSave                   sync.RWMutex
)

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             DeleteReferralWithCodeFunc: func(code string) error {
// 	               panic("TODO: mock out the DeleteReferralWithCode method")
//             },
//             GetFunc: func(q *Query) (model.Referral, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             SaveFunc: func(o *model.Referral) error {
// 	               panic("TODO: mock out the Save method")
//             },
//         }
//
//         // TODO: use mockedService in code that requires Service
//         //       and then make assertions.
//
//     }
type ServiceMock struct {
	// DeleteReferralWithCodeFunc mocks the DeleteReferralWithCode method.
	DeleteReferralWithCodeFunc func(code string) error

	// GetFunc mocks the Get method.
	GetFunc func(q *Query) (model.Referral, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(o *model.Referral) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteReferralWithCode holds details about calls to the DeleteReferralWithCode method.
		DeleteReferralWithCode []struct {
			// Code is the code argument value.
			Code string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Q is the q argument value.
			Q *Query
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// O is the o argument value.
			O *model.Referral
		}
	}
}

// DeleteReferralWithCode calls DeleteReferralWithCodeFunc.
func (mock *ServiceMock) DeleteReferralWithCode(code string) error {
	if mock.DeleteReferralWithCodeFunc == nil {
		panic("ServiceMock.DeleteReferralWithCodeFunc: method is nil but Service.DeleteReferralWithCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockServiceMockDeleteReferralWithCode.Lock()
	mock.calls.DeleteReferralWithCode = append(mock.calls.DeleteReferralWithCode, callInfo)
	lockServiceMockDeleteReferralWithCode.Unlock()
	return mock.DeleteReferralWithCodeFunc(code)
}

// DeleteReferralWithCodeCalls gets all the calls that were made to DeleteReferralWithCode.
// Check the length with:
//     len(mockedService.DeleteReferralWithCodeCalls())
func (mock *ServiceMock) DeleteReferralWithCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockServiceMockDeleteReferralWithCode.RLock()
	calls = mock.calls.DeleteReferralWithCode
	lockServiceMockDeleteReferralWithCode.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(q *Query) (model.Referral, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		Q *Query
	}{
		Q: q,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(q)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	Q *Query
} {
	var calls []struct {
		Q *Query
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ServiceMock) Save(o *model.Referral) error {
	if mock.SaveFunc == nil {
		panic("ServiceMock.SaveFunc: method is nil but Service.Save was just called")
	}
	callInfo := struct {
		O *model.Referral
	}{
		O: o,
	}
	lockServiceMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockServiceMockSave.Unlock()
	return mock.SaveFunc(o)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedService.SaveCalls())
func (mock *ServiceMock) SaveCalls() []struct {
	O *model.Referral
} {
	var calls []struct {
		O *model.Referral
	}
	lockServiceMockSave.RLock()
	calls = mock.calls.Save
	lockServiceMockSave.RUnlock()
	return calls
}
