// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"sync"

	"github.com/dwarvesf/yggdrasil/services/identity/model"
)

var (
	lockServiceMockGet        sync.RWMutex
	lockServiceMockLogin      sync.RWMutex
	lockServiceMockMakeActive sync.RWMutex
	lockServiceMockSave       sync.RWMutex
)

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             GetFunc: func(userQuery *UserQuery) (*model.User, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             LoginFunc: func(loginType string, identity string) (*model.User, error) {
// 	               panic("TODO: mock out the Login method")
//             },
//             MakeActiveFunc: func(user *model.User) error {
// 	               panic("TODO: mock out the MakeActive method")
//             },
//             SaveFunc: func(r *model.User) error {
// 	               panic("TODO: mock out the Save method")
//             },
//         }
//
//         // TODO: use mockedService in code that requires Service
//         //       and then make assertions.
//
//     }
type ServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(userQuery *UserQuery) (*model.User, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(loginType string, identity string) (*model.User, error)

	// MakeActiveFunc mocks the MakeActive method.
	MakeActiveFunc func(user *model.User) error

	// SaveFunc mocks the Save method.
	SaveFunc func(r *model.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// UserQuery is the userQuery argument value.
			UserQuery *UserQuery
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// LoginType is the loginType argument value.
			LoginType string
			// Identity is the identity argument value.
			Identity string
		}
		// MakeActive holds details about calls to the MakeActive method.
		MakeActive []struct {
			// User is the user argument value.
			User *model.User
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// R is the r argument value.
			R *model.User
		}
	}
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(userQuery *UserQuery) (*model.User, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		UserQuery *UserQuery
	}{
		UserQuery: userQuery,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(userQuery)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	UserQuery *UserQuery
} {
	var calls []struct {
		UserQuery *UserQuery
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *ServiceMock) Login(loginType string, identity string) (*model.User, error) {
	if mock.LoginFunc == nil {
		panic("ServiceMock.LoginFunc: method is nil but Service.Login was just called")
	}
	callInfo := struct {
		LoginType string
		Identity  string
	}{
		LoginType: loginType,
		Identity:  identity,
	}
	lockServiceMockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	lockServiceMockLogin.Unlock()
	return mock.LoginFunc(loginType, identity)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//     len(mockedService.LoginCalls())
func (mock *ServiceMock) LoginCalls() []struct {
	LoginType string
	Identity  string
} {
	var calls []struct {
		LoginType string
		Identity  string
	}
	lockServiceMockLogin.RLock()
	calls = mock.calls.Login
	lockServiceMockLogin.RUnlock()
	return calls
}

// MakeActive calls MakeActiveFunc.
func (mock *ServiceMock) MakeActive(user *model.User) error {
	if mock.MakeActiveFunc == nil {
		panic("ServiceMock.MakeActiveFunc: method is nil but Service.MakeActive was just called")
	}
	callInfo := struct {
		User *model.User
	}{
		User: user,
	}
	lockServiceMockMakeActive.Lock()
	mock.calls.MakeActive = append(mock.calls.MakeActive, callInfo)
	lockServiceMockMakeActive.Unlock()
	return mock.MakeActiveFunc(user)
}

// MakeActiveCalls gets all the calls that were made to MakeActive.
// Check the length with:
//     len(mockedService.MakeActiveCalls())
func (mock *ServiceMock) MakeActiveCalls() []struct {
	User *model.User
} {
	var calls []struct {
		User *model.User
	}
	lockServiceMockMakeActive.RLock()
	calls = mock.calls.MakeActive
	lockServiceMockMakeActive.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ServiceMock) Save(r *model.User) error {
	if mock.SaveFunc == nil {
		panic("ServiceMock.SaveFunc: method is nil but Service.Save was just called")
	}
	callInfo := struct {
		R *model.User
	}{
		R: r,
	}
	lockServiceMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockServiceMockSave.Unlock()
	return mock.SaveFunc(r)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedService.SaveCalls())
func (mock *ServiceMock) SaveCalls() []struct {
	R *model.User
} {
	var calls []struct {
		R *model.User
	}
	lockServiceMockSave.RLock()
	calls = mock.calls.Save
	lockServiceMockSave.RUnlock()
	return calls
}
