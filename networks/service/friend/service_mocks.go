// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package friend

import (
	"github.com/dwarvesf/yggdrasil/networks/model"
	"github.com/satori/go.uuid"
	"sync"
)

var (
	lockServiceMockAccept     sync.RWMutex
	lockServiceMockGetFriends sync.RWMutex
	lockServiceMockMakeFriend sync.RWMutex
	lockServiceMockReject     sync.RWMutex
	lockServiceMockSave       sync.RWMutex
	lockServiceMockUnFriend   sync.RWMutex
)

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             AcceptFunc: func(from uuid.UUID, to uuid.UUID) error {
// 	               panic("TODO: mock out the Accept method")
//             },
//             GetFriendsFunc: func(userID uuid.UUID) ([]model.Friend, error) {
// 	               panic("TODO: mock out the GetFriends method")
//             },
//             MakeFriendFunc: func(from uuid.UUID, to uuid.UUID) error {
// 	               panic("TODO: mock out the MakeFriend method")
//             },
//             RejectFunc: func(from uuid.UUID, to uuid.UUID) error {
// 	               panic("TODO: mock out the Reject method")
//             },
//             SaveFunc: func(o *model.Friend) error {
// 	               panic("TODO: mock out the Save method")
//             },
//             UnFriendFunc: func(from uuid.UUID, to uuid.UUID) error {
// 	               panic("TODO: mock out the UnFriend method")
//             },
//         }
//
//         // TODO: use mockedService in code that requires Service
//         //       and then make assertions.
//
//     }
type ServiceMock struct {
	// AcceptFunc mocks the Accept method.
	AcceptFunc func(from uuid.UUID, to uuid.UUID) error

	// GetFriendsFunc mocks the GetFriends method.
	GetFriendsFunc func(userID uuid.UUID) ([]model.Friend, error)

	// MakeFriendFunc mocks the MakeFriend method.
	MakeFriendFunc func(from uuid.UUID, to uuid.UUID) error

	// RejectFunc mocks the Reject method.
	RejectFunc func(from uuid.UUID, to uuid.UUID) error

	// SaveFunc mocks the Save method.
	SaveFunc func(o *model.Friend) error

	// UnFriendFunc mocks the UnFriend method.
	UnFriendFunc func(from uuid.UUID, to uuid.UUID) error

	// calls tracks calls to the methods.
	calls struct {
		// Accept holds details about calls to the Accept method.
		Accept []struct {
			// From is the from argument value.
			From uuid.UUID
			// To is the to argument value.
			To uuid.UUID
		}
		// GetFriends holds details about calls to the GetFriends method.
		GetFriends []struct {
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// MakeFriend holds details about calls to the MakeFriend method.
		MakeFriend []struct {
			// From is the from argument value.
			From uuid.UUID
			// To is the to argument value.
			To uuid.UUID
		}
		// Reject holds details about calls to the Reject method.
		Reject []struct {
			// From is the from argument value.
			From uuid.UUID
			// To is the to argument value.
			To uuid.UUID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// O is the o argument value.
			O *model.Friend
		}
		// UnFriend holds details about calls to the UnFriend method.
		UnFriend []struct {
			// From is the from argument value.
			From uuid.UUID
			// To is the to argument value.
			To uuid.UUID
		}
	}
}

// Accept calls AcceptFunc.
func (mock *ServiceMock) Accept(from uuid.UUID, to uuid.UUID) error {
	if mock.AcceptFunc == nil {
		panic("ServiceMock.AcceptFunc: method is nil but Service.Accept was just called")
	}
	callInfo := struct {
		From uuid.UUID
		To   uuid.UUID
	}{
		From: from,
		To:   to,
	}
	lockServiceMockAccept.Lock()
	mock.calls.Accept = append(mock.calls.Accept, callInfo)
	lockServiceMockAccept.Unlock()
	return mock.AcceptFunc(from, to)
}

// AcceptCalls gets all the calls that were made to Accept.
// Check the length with:
//     len(mockedService.AcceptCalls())
func (mock *ServiceMock) AcceptCalls() []struct {
	From uuid.UUID
	To   uuid.UUID
} {
	var calls []struct {
		From uuid.UUID
		To   uuid.UUID
	}
	lockServiceMockAccept.RLock()
	calls = mock.calls.Accept
	lockServiceMockAccept.RUnlock()
	return calls
}

// GetFriends calls GetFriendsFunc.
func (mock *ServiceMock) GetFriends(userID uuid.UUID) ([]model.Friend, error) {
	if mock.GetFriendsFunc == nil {
		panic("ServiceMock.GetFriendsFunc: method is nil but Service.GetFriends was just called")
	}
	callInfo := struct {
		UserID uuid.UUID
	}{
		UserID: userID,
	}
	lockServiceMockGetFriends.Lock()
	mock.calls.GetFriends = append(mock.calls.GetFriends, callInfo)
	lockServiceMockGetFriends.Unlock()
	return mock.GetFriendsFunc(userID)
}

// GetFriendsCalls gets all the calls that were made to GetFriends.
// Check the length with:
//     len(mockedService.GetFriendsCalls())
func (mock *ServiceMock) GetFriendsCalls() []struct {
	UserID uuid.UUID
} {
	var calls []struct {
		UserID uuid.UUID
	}
	lockServiceMockGetFriends.RLock()
	calls = mock.calls.GetFriends
	lockServiceMockGetFriends.RUnlock()
	return calls
}

// MakeFriend calls MakeFriendFunc.
func (mock *ServiceMock) MakeFriend(from uuid.UUID, to uuid.UUID) error {
	if mock.MakeFriendFunc == nil {
		panic("ServiceMock.MakeFriendFunc: method is nil but Service.MakeFriend was just called")
	}
	callInfo := struct {
		From uuid.UUID
		To   uuid.UUID
	}{
		From: from,
		To:   to,
	}
	lockServiceMockMakeFriend.Lock()
	mock.calls.MakeFriend = append(mock.calls.MakeFriend, callInfo)
	lockServiceMockMakeFriend.Unlock()
	return mock.MakeFriendFunc(from, to)
}

// MakeFriendCalls gets all the calls that were made to MakeFriend.
// Check the length with:
//     len(mockedService.MakeFriendCalls())
func (mock *ServiceMock) MakeFriendCalls() []struct {
	From uuid.UUID
	To   uuid.UUID
} {
	var calls []struct {
		From uuid.UUID
		To   uuid.UUID
	}
	lockServiceMockMakeFriend.RLock()
	calls = mock.calls.MakeFriend
	lockServiceMockMakeFriend.RUnlock()
	return calls
}

// Reject calls RejectFunc.
func (mock *ServiceMock) Reject(from uuid.UUID, to uuid.UUID) error {
	if mock.RejectFunc == nil {
		panic("ServiceMock.RejectFunc: method is nil but Service.Reject was just called")
	}
	callInfo := struct {
		From uuid.UUID
		To   uuid.UUID
	}{
		From: from,
		To:   to,
	}
	lockServiceMockReject.Lock()
	mock.calls.Reject = append(mock.calls.Reject, callInfo)
	lockServiceMockReject.Unlock()
	return mock.RejectFunc(from, to)
}

// RejectCalls gets all the calls that were made to Reject.
// Check the length with:
//     len(mockedService.RejectCalls())
func (mock *ServiceMock) RejectCalls() []struct {
	From uuid.UUID
	To   uuid.UUID
} {
	var calls []struct {
		From uuid.UUID
		To   uuid.UUID
	}
	lockServiceMockReject.RLock()
	calls = mock.calls.Reject
	lockServiceMockReject.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ServiceMock) Save(o *model.Friend) error {
	if mock.SaveFunc == nil {
		panic("ServiceMock.SaveFunc: method is nil but Service.Save was just called")
	}
	callInfo := struct {
		O *model.Friend
	}{
		O: o,
	}
	lockServiceMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockServiceMockSave.Unlock()
	return mock.SaveFunc(o)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedService.SaveCalls())
func (mock *ServiceMock) SaveCalls() []struct {
	O *model.Friend
} {
	var calls []struct {
		O *model.Friend
	}
	lockServiceMockSave.RLock()
	calls = mock.calls.Save
	lockServiceMockSave.RUnlock()
	return calls
}

// UnFriend calls UnFriendFunc.
func (mock *ServiceMock) UnFriend(from uuid.UUID, to uuid.UUID) error {
	if mock.UnFriendFunc == nil {
		panic("ServiceMock.UnFriendFunc: method is nil but Service.UnFriend was just called")
	}
	callInfo := struct {
		From uuid.UUID
		To   uuid.UUID
	}{
		From: from,
		To:   to,
	}
	lockServiceMockUnFriend.Lock()
	mock.calls.UnFriend = append(mock.calls.UnFriend, callInfo)
	lockServiceMockUnFriend.Unlock()
	return mock.UnFriendFunc(from, to)
}

// UnFriendCalls gets all the calls that were made to UnFriend.
// Check the length with:
//     len(mockedService.UnFriendCalls())
func (mock *ServiceMock) UnFriendCalls() []struct {
	From uuid.UUID
	To   uuid.UUID
} {
	var calls []struct {
		From uuid.UUID
		To   uuid.UUID
	}
	lockServiceMockUnFriend.RLock()
	calls = mock.calls.UnFriend
	lockServiceMockUnFriend.RUnlock()
	return calls
}
